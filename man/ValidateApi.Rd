% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/validate_api.R
\docType{class}
\name{ValidateApi}
\alias{ValidateApi}
\title{Validate operations}
\format{
An \code{R6Class} generator object
}
\description{
rmzTabM.Validate
}
\section{Methods}{

\describe{
\strong{ ValidateMzTabFile } \emph{  }
Validates an mzTab file in XML or JSON representation and reports syntactic, structural, and semantic errors. 

\itemize{
\item \emph{ @param } mztabfile \link{MzTab}
\item \emph{ @param } level Enum < [info, warn, error] > 
\item \emph{ @param } max.errors integer
\item \emph{ @param } semantic.validation character
\item \emph{ @returnType } list( \link{ValidationMessage} ) \cr


\item status code : 200 | Validation Okay

\item return type : array[ValidationMessage] 
\item response headers :

\tabular{ll}{
}
\item status code : 415 | Unsupported content type


\item response headers :

\tabular{ll}{
}
\item status code : 422 | Invalid input

\item return type : array[ValidationMessage] 
\item response headers :

\tabular{ll}{
}
\item status code : 0 | Unexpected error

\item return type : Error 
\item response headers :

\tabular{ll}{
}
}

}
}

\examples{
\dontrun{
####################  ValidateMzTabFile  ####################

library(rmzTabM)
var.mztabfile <- MzTab$new() # MzTab | mzTab file that should be validated.
var.level <- 'info' # character | The level of errors that should be reported, one of ERROR, WARN, INFO.
var.max.errors <- 100 # integer | The maximum number of errors to return.
var.semantic.validation <- FALSE # character | Whether a semantic validation against the default rule set should be performed.

api.instance <- ValidateApi$new()

result <- api.instance$ValidateMzTabFile(var.mztabfile, level=var.level, max.errors=var.max.errors, semantic.validation=var.semantic.validation)


}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{apiClient}}{Handles the client-server communication.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{ValidateApi$new()}}
\item \href{#method-ValidateMzTabFile}{\code{ValidateApi$ValidateMzTabFile()}}
\item \href{#method-ValidateMzTabFileWithHttpInfo}{\code{ValidateApi$ValidateMzTabFileWithHttpInfo()}}
\item \href{#method-clone}{\code{ValidateApi$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ValidateApi$new(apiClient)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ValidateMzTabFile"></a>}}
\if{latex}{\out{\hypertarget{method-ValidateMzTabFile}{}}}
\subsection{Method \code{ValidateMzTabFile()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ValidateApi$ValidateMzTabFile(
  mztabfile,
  level = "info",
  max.errors = 100,
  semantic.validation = FALSE,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ValidateMzTabFileWithHttpInfo"></a>}}
\if{latex}{\out{\hypertarget{method-ValidateMzTabFileWithHttpInfo}{}}}
\subsection{Method \code{ValidateMzTabFileWithHttpInfo()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ValidateApi$ValidateMzTabFileWithHttpInfo(
  mztabfile,
  level = "info",
  max.errors = 100,
  semantic.validation = FALSE,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ValidateApi$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
